openapi: 3.0.3
info:
  title: 'TODO API Documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/login:
    post:
      summary: Login.
      operationId: login
      description: "Authenticates the user and returns the user's token."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    token: '{YOUR_AUTH_KEY}'
                  message: Authenticated
                  status: 200
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: '{YOUR_AUTH_KEY}'
                  message:
                    type: string
                    example: Authenticated
                  status:
                    type: integer
                    example: 200
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email. Must be a valid email address."
                  example: john@example.com
                password:
                  type: string
                  description: "The user's password."
                  example: no-example
              required:
                - email
                - password
      security: []
  /api/logout:
    post:
      summary: Logout.
      operationId: logout
      description: 'Signs out the user and destroys the API token.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Authentication
  /api/register:
    post:
      summary: Register.
      operationId: register
      description: "Register the user and returns the user's token."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    token: '{YOUR_AUTH_KEY}'
                  message: Authenticated
                  status: 200
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: '{YOUR_AUTH_KEY}'
                  message:
                    type: string
                    example: Authenticated
                  status:
                    type: integer
                    example: 200
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The user's name. Must be at least 3 characters. Must not be greater than 255 characters."
                  example: 'John Doe'
                email:
                  type: string
                  description: "The user's email. Must be a valid email address."
                  example: john@example.com
                password:
                  type: string
                  description: "The user's password. Must be at least 8 characters."
                  example: no-example
              required:
                - name
                - email
                - password
      security: []
  /api/user:
    get:
      summary: User.
      operationId: user
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: user
                    id: 2
                    attributes:
                      name: 'User example'
                      email: example@example.com
                      emailVerifiedAt: null
                      created_at: '2024-09-15T18:43:53.000000Z'
                      updated_at: '2024-09-15T18:43:53.000000Z'
                    links:
                      self: 'http://localhost/api/user?2'
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: user
                      id:
                        type: integer
                        example: 2
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                            example: 'User example'
                          email:
                            type: string
                            example: example@example.com
                          emailVerifiedAt:
                            type: string
                            example: null
                          created_at:
                            type: string
                            example: '2024-09-15T18:43:53.000000Z'
                          updated_at:
                            type: string
                            example: '2024-09-15T18:43:53.000000Z'
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'http://localhost/api/user?2'
      tags:
        - Authentication
  /api/v1/categories:
    get:
      summary: 'Get all categories'
      operationId: getAllCategories
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Managing Categories'
    post:
      summary: 'Create a category'
      operationId: createACategory
      description: 'Creates a new category for the authenticated user.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: category
                    id: 31
                    attributes:
                      title: 'Test 2'
                      slug: test-2
                    relationships:
                      user:
                        data:
                          type: user
                          id: 2
                    links:
                      self: 'http://localhost/api/v1/categories/31'
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: category
                      id:
                        type: integer
                        example: 31
                      attributes:
                        type: object
                        properties:
                          title:
                            type: string
                            example: 'Test 2'
                          slug:
                            type: string
                            example: test-2
                      relationships:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: user
                                  id:
                                    type: integer
                                    example: 2
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'http://localhost/api/v1/categories/31'
      tags:
        - 'Managing Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      properties:
                        title:
                          type: string
                          description: "The category's title. Must not be greater than 50 characters."
                          example: Home
                        slug:
                          type: string
                          description: "The category's slug."
                          example: home
              required:
                - data
  '/api/v1/categories/{id}':
    get:
      summary: 'Show a category'
      operationId: showACategory
      description: 'Displays the specified category.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: category
                    id: 31
                    attributes:
                      title: 'Test 2'
                      slug: test-2
                      createdAt: '2024-09-23T18:04:38.000000Z'
                      updatedAt: '2024-09-23T18:04:38.000000Z'
                    relationships:
                      user:
                        data:
                          type: user
                          id: 2
                    links:
                      self: 'http://localhost/api/v1/categories/31'
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: category
                      id:
                        type: integer
                        example: 31
                      attributes:
                        type: object
                        properties:
                          title:
                            type: string
                            example: 'Test 2'
                          slug:
                            type: string
                            example: test-2
                          createdAt:
                            type: string
                            example: '2024-09-23T18:04:38.000000Z'
                          updatedAt:
                            type: string
                            example: '2024-09-23T18:04:38.000000Z'
                      relationships:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: user
                                  id:
                                    type: integer
                                    example: 2
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'http://localhost/api/v1/categories/31'
      tags:
        - 'Managing Categories'
    put:
      summary: 'Update a category'
      operationId: updateACategory
      description: 'Update the specified category.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: category
                    id: 31
                    attributes:
                      title: 'category updated'
                      slug: category-updated
                    relationships:
                      user:
                        data:
                          type: user
                          id: 2
                    links:
                      self: 'http://localhost/api/v1/categories/31'
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: category
                      id:
                        type: integer
                        example: 31
                      attributes:
                        type: object
                        properties:
                          title:
                            type: string
                            example: 'category updated'
                          slug:
                            type: string
                            example: category-updated
                      relationships:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: user
                                  id:
                                    type: integer
                                    example: 2
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'http://localhost/api/v1/categories/31'
      tags:
        - 'Managing Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      properties:
                        title:
                          type: string
                          description: 'Must not be greater than 50 characters.'
                          example: dyiojqe
                        slug:
                          type: string
                          description: ''
                          example: et
                    relationships:
                      type: object
                      description: ''
                      example: []
                      properties:
                        user:
                          type: object
                          description: ''
                          example: []
                          properties:
                            data:
                              type: object
                              description: ''
                              example: []
                              properties:
                                id:
                                  type: string
                                  description: "The category's user. This is not editable."
                                  example: '2'
              required:
                - data
    delete:
      summary: 'Delete a category'
      operationId: deleteACategory
      description: 'Delete the specified category.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  message: 'Category deleted successfully'
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  message:
                    type: string
                    example: 'Category deleted successfully'
                  status:
                    type: integer
                    example: 200
      tags:
        - 'Managing Categories'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: 1
        required: true
        schema:
          type: integer
  /api/v1/tasks:
    get:
      summary: 'Get all tasks'
      operationId: getAllTasks
      description: ''
      parameters:
        -
          in: query
          name: sort
          description: 'Data field(s) to sort by. Multiple fields can be specified by separating them with a comma. Denote descending sort with a minis (-) sign.'
          example: 'sort=-created_at,title'
          required: false
          schema:
            type: string
            description: 'Data field(s) to sort by. Multiple fields can be specified by separating them with a comma. Denote descending sort with a minis (-) sign.'
            example: 'sort=-created_at,title'
        -
          in: query
          name: 'filter[status]'
          description: 'Filter by status code: C: completed, D: Doing, P: Pending.'
          example: null
          required: false
          schema:
            type: string
            description: 'Filter by status code: C: completed, D: Doing, P: Pending.'
            example: null
        -
          in: query
          name: 'filter[title]'
          description: 'Filter by title. Wildcards ares supported.'
          example: 'filter[title]=*test*'
          required: false
          schema:
            type: string
            description: 'Filter by title. Wildcards ares supported.'
            example: 'filter[title]=*test*'
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Managing Tasks'
    post:
      summary: 'Create a task'
      operationId: createATask
      description: 'Creates a new task for the authenticated user.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"data\": {\n \"type\": \"task\",\n \"id\": 602,\n \"attributes\": {\n     \"title\": \"Task test\",\n     \"description\": \"Task description\",\n     \"status\": \"P\",\n     \"created_at\": \"2024-09-23T17:16:52.000000Z\",\n     \"updated_at\": \"2024-09-23T17:16:52.000000Z\"\n },\n \"relationships\": {\n     \"user\": {\n         \"data\": {\n             \"type\": \"user\",\n             \"id\": 2\n         }\n     },\n     \"category\": {\n         \"data\": {\n             \"type\": \"category\",\n             \"id\": 1\n         }\n     }\n },\n \"links\": {\n     \"self\": \"http://localhost/api/v1/tasks/602\"\n },\n},\n}"
      tags:
        - 'Managing Tasks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      properties:
                        title:
                          type: string
                          description: "The task's title. Must not be greater than 255 characters."
                          example: 'Buy milk'
                        description:
                          type: string
                          description: "The task's description. Must not be greater than 500 characters."
                          example: 'Buy milk from the store'
                        status:
                          type: string
                          description: "The task's status."
                          example: P
                          enum:
                            - C
                            - D
                            - P
                        due_date:
                          type: string
                          description: 'Must be a valid date.'
                          example: '2024-10-01T02:56:52'
                    relationships:
                      type: object
                      description: ''
                      example: []
                      properties:
                        category:
                          type: object
                          description: ''
                          example: []
                          properties:
                            data:
                              type: object
                              description: ''
                              example: []
                              properties:
                                id:
                                  type: integer
                                  description: 'The category associated with the task.'
                                  example: 2
                                  enum:
                                    - null
              required:
                - data
  '/api/v1/tasks/{id}':
    get:
      summary: 'Show a task'
      operationId: showATask
      description: 'Displays the specified task.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: task
                    id: 5
                    attributes:
                      title: 'quis repudiandae'
                      description: 'Sed pariatur earum atque harum porro optio reprehenderit.'
                      status: C
                      created_at: '2024-09-15T18:43:54.000000Z'
                      updated_at: '2024-09-19T01:31:30.000000Z'
                    relationships:
                      user:
                        data:
                          type: user
                          id: 2
                      category:
                        data:
                          type: category
                          id: 5
                    links:
                      self: 'http://localhost/api/v1/tasks/5'
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: task
                      id:
                        type: integer
                        example: 5
                      attributes:
                        type: object
                        properties:
                          title:
                            type: string
                            example: 'quis repudiandae'
                          description:
                            type: string
                            example: 'Sed pariatur earum atque harum porro optio reprehenderit.'
                          status:
                            type: string
                            example: C
                          created_at:
                            type: string
                            example: '2024-09-15T18:43:54.000000Z'
                          updated_at:
                            type: string
                            example: '2024-09-19T01:31:30.000000Z'
                      relationships:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: user
                                  id:
                                    type: integer
                                    example: 2
                          category:
                            type: object
                            properties:
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: category
                                  id:
                                    type: integer
                                    example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'http://localhost/api/v1/tasks/5'
      tags:
        - 'Managing Tasks'
    put:
      summary: 'Update a task'
      operationId: updateATask
      description: 'update the specified task.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"data\": {\n \"type\": \"task\",\n \"id\": 602,\n \"attributes\": {\n     \"title\": \"Task test updated\",\n     \"description\": \"Task description updated\",\n     \"status\": \"P\",\n     \"created_at\": \"2024-09-23T17:16:52.000000Z\",\n     \"updated_at\": \"2024-09-23T17:16:52.000000Z\"\n },\n \"relationships\": {\n     \"user\": {\n         \"data\": {\n             \"type\": \"user\",\n             \"id\": 2\n         }\n     },\n     \"category\": {\n         \"data\": {\n             \"type\": \"category\",\n             \"id\": 1\n         }\n     }\n },\n \"links\": {\n     \"self\": \"http://localhost/api/v1/tasks/602\"\n },\n},\n}"
      tags:
        - 'Managing Tasks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      properties:
                        title:
                          type: string
                          description: "The task's title. Must not be greater than 255 characters."
                          example: 'Buy milk'
                        description:
                          type: string
                          description: "The task's description. Must not be greater than 500 characters."
                          example: 'Buy milk from the store'
                        status:
                          type: string
                          description: "The task's status."
                          example: P
                          enum:
                            - C
                            - D
                            - P
                        due_date:
                          type: string
                          description: 'Must be a valid date.'
                          example: '2024-10-01T02:56:52'
                    relationships:
                      type: object
                      description: ''
                      example: []
                      properties:
                        category:
                          type: object
                          description: ''
                          example: []
                          properties:
                            data:
                              type: object
                              description: ''
                              example: []
                              properties:
                                id:
                                  type: integer
                                  description: 'The category associated with the task.'
                                  example: 2
                                  enum:
                                    - null
              required:
                - data
    delete:
      summary: 'Delete a task'
      operationId: deleteATask
      description: 'Delete the specified task.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  message: 'Task deleted successfully'
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  message:
                    type: string
                    example: 'Task deleted successfully'
                  status:
                    type: integer
                    example: 200
      tags:
        - 'Managing Tasks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the task.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/v1/categories/{category_id}/tasks':
    get:
      summary: 'Get all tasks'
      operationId: getAllTasks
      description: ''
      parameters:
        -
          in: query
          name: sort
          description: 'Data field(s) to sort by. Multiple fields can be specified by separating them with a comma. Denote descending sort with a minis (-) sign.'
          example: 'sort=-created_at,title'
          required: false
          schema:
            type: string
            description: 'Data field(s) to sort by. Multiple fields can be specified by separating them with a comma. Denote descending sort with a minis (-) sign.'
            example: 'sort=-created_at,title'
        -
          in: query
          name: 'filter[status]'
          description: 'Filter by status code: C: completed, D: Doing, P: Pending.'
          example: null
          required: false
          schema:
            type: string
            description: 'Filter by status code: C: completed, D: Doing, P: Pending.'
            example: null
        -
          in: query
          name: 'filter[title]'
          description: 'Filter by title. Wildcards ares supported.'
          example: 'filter[title]=*test*'
          required: false
          schema:
            type: string
            description: 'Filter by title. Wildcards ares supported.'
            example: 'filter[title]=*test*'
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Managing Tasks by Category'
    post:
      summary: 'Create a task'
      operationId: createATask
      description: 'Creates a new task for the authenticated user.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"data\": {\n \"type\": \"task\",\n \"id\": 602,\n \"attributes\": {\n     \"title\": \"Task test\",\n     \"description\": \"Task description\",\n     \"status\": \"P\",\n     \"created_at\": \"2024-09-23T17:16:52.000000Z\",\n     \"updated_at\": \"2024-09-23T17:16:52.000000Z\"\n },\n \"relationships\": {\n     \"user\": {\n         \"data\": {\n             \"type\": \"user\",\n             \"id\": 2\n         }\n     },\n     \"category\": {\n         \"data\": {\n             \"type\": \"category\",\n             \"id\": 1\n         }\n     }\n },\n \"links\": {\n     \"self\": \"http://localhost/api/v1/tasks/602\"\n },\n},\n}"
      tags:
        - 'Managing Tasks by Category'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      properties:
                        title:
                          type: string
                          description: "The task's title. Must not be greater than 255 characters."
                          example: 'Buy milk'
                        description:
                          type: string
                          description: "The task's description. Must not be greater than 500 characters."
                          example: 'Buy milk from the store'
                        status:
                          type: string
                          description: "The task's status."
                          example: P
                          enum:
                            - C
                            - D
                            - P
                        due_date:
                          type: string
                          description: 'Must be a valid date.'
                          example: '2024-10-01T02:56:52'
                    relationships:
                      type: object
                      description: ''
                      example: []
                      properties:
                        category:
                          type: object
                          description: ''
                          example: []
                          properties:
                            data:
                              type: object
                              description: ''
                              example: []
                              properties:
                                id:
                                  type: integer
                                  description: 'The category associated with the task.'
                                  example: 2
                                  enum:
                                    - null
              required:
                - data
    parameters:
      -
        in: path
        name: category_id
        description: 'The ID of the category.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/v1/categories/{category_id}/tasks/{id}':
    get:
      summary: 'Show a task'
      operationId: showATask
      description: 'Displays the specified task.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    type: task
                    id: 5
                    attributes:
                      title: 'quis repudiandae'
                      description: 'Sed pariatur earum atque harum porro optio reprehenderit.'
                      status: C
                      created_at: '2024-09-15T18:43:54.000000Z'
                      updated_at: '2024-09-19T01:31:30.000000Z'
                    relationships:
                      user:
                        data:
                          type: user
                          id: 2
                      category:
                        data:
                          type: category
                          id: 5
                    links:
                      self: 'http://localhost/api/v1/tasks/5'
                properties:
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: task
                      id:
                        type: integer
                        example: 5
                      attributes:
                        type: object
                        properties:
                          title:
                            type: string
                            example: 'quis repudiandae'
                          description:
                            type: string
                            example: 'Sed pariatur earum atque harum porro optio reprehenderit.'
                          status:
                            type: string
                            example: C
                          created_at:
                            type: string
                            example: '2024-09-15T18:43:54.000000Z'
                          updated_at:
                            type: string
                            example: '2024-09-19T01:31:30.000000Z'
                      relationships:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: user
                                  id:
                                    type: integer
                                    example: 2
                          category:
                            type: object
                            properties:
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: category
                                  id:
                                    type: integer
                                    example: 5
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: 'http://localhost/api/v1/tasks/5'
      tags:
        - 'Managing Tasks by Category'
    put:
      summary: 'Update a task'
      operationId: updateATask
      description: 'update the specified task.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n\"data\": {\n \"type\": \"task\",\n \"id\": 602,\n \"attributes\": {\n     \"title\": \"Task test updated\",\n     \"description\": \"Task description updated\",\n     \"status\": \"P\",\n     \"created_at\": \"2024-09-23T17:16:52.000000Z\",\n     \"updated_at\": \"2024-09-23T17:16:52.000000Z\"\n },\n \"relationships\": {\n     \"user\": {\n         \"data\": {\n             \"type\": \"user\",\n             \"id\": 2\n         }\n     },\n     \"category\": {\n         \"data\": {\n             \"type\": \"category\",\n             \"id\": 1\n         }\n     }\n },\n \"links\": {\n     \"self\": \"http://localhost/api/v1/tasks/602\"\n },\n},\n}"
      tags:
        - 'Managing Tasks by Category'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      properties:
                        title:
                          type: string
                          description: "The task's title. Must not be greater than 255 characters."
                          example: 'Buy milk'
                        description:
                          type: string
                          description: "The task's description. Must not be greater than 500 characters."
                          example: 'Buy milk from the store'
                        status:
                          type: string
                          description: "The task's status."
                          example: P
                          enum:
                            - C
                            - D
                            - P
                        due_date:
                          type: string
                          description: 'Must be a valid date.'
                          example: '2024-10-01T02:56:52'
                    relationships:
                      type: object
                      description: ''
                      example: []
                      properties:
                        category:
                          type: object
                          description: ''
                          example: []
                          properties:
                            data:
                              type: object
                              description: ''
                              example: []
                              properties:
                                id:
                                  type: integer
                                  description: 'The category associated with the task.'
                                  example: 2
                                  enum:
                                    - null
              required:
                - data
    delete:
      summary: 'Delete a task'
      operationId: deleteATask
      description: 'Delete the specified task.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  message: 'Task deleted successfully'
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  message:
                    type: string
                    example: 'Task deleted successfully'
                  status:
                    type: integer
                    example: 200
      tags:
        - 'Managing Tasks by Category'
    parameters:
      -
        in: path
        name: category_id
        description: 'The ID of the category.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: id
        description: 'The ID of the task.'
        example: culpa
        required: true
        schema:
          type: string
tags:
  -
    name: Authentication
    description: ''
  -
    name: 'Managing Categories'
    description: ''
  -
    name: 'Managing Tasks'
    description: ''
  -
    name: 'Managing Tasks by Category'
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
